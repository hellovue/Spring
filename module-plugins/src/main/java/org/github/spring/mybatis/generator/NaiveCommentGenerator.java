package org.github.spring.mybatis.generator;

import java.util.Date;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.github.spring.footstone.NaiveDateFormat;
import org.github.spring.util.StringUtil;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.internal.DefaultCommentGenerator;

import com.google.common.base.Joiner;

import lombok.val;

/**
 * NaiveCommentGenerator.
 *
 * @author JYD_XL
 */
public class NaiveCommentGenerator extends DefaultCommentGenerator {
  /** author. */
  private static final String AUTHOR = "MyBatisGenerator";
  
  /** joiner. */
  private static final Joiner JOINER = Joiner.on("").skipNulls();
  
  @Override
  public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
    topLevelClass.addJavaDocLine("/**");
    val shortName = topLevelClass.getType().getShortNameWithoutTypeArguments();
    val tableName = introspectedTable.getAliasedFullyQualifiedTableNameAtRuntime();
    
    topLevelClass.addJavaDocLine(JOINER.join(" * ", shortName, " [ ", tableName, " ]."));
    topLevelClass.addJavaDocLine(" *");
    topLevelClass.addJavaDocLine(" * @author " + AUTHOR);
    topLevelClass.addJavaDocLine(" * @version " + new NaiveDateFormat("yyyy-MM-dd").format(new Date()));
    topLevelClass.addJavaDocLine(" */");
  }
  
  @Override
  public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
    String tableName = introspectedTable.getTableConfiguration().getTableName();
    String columnName = introspectedColumn.getActualColumnName();
    String remark = StringUtil.isEmpty(introspectedColumn.getRemarks()) ? columnName : introspectedColumn.getRemarks();
    field.addJavaDocLine(JOINER.join("/** ", remark, " [ ", tableName, ".", columnName, " ]. */"));
  }
  
  @Override
  public void addFieldComment(Field field, IntrospectedTable introspectedTable) {}
  
  @Override
  public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn
    introspectedColumn) {
    val remarks = introspectedColumn.getRemarks();
    val column = introspectedColumn.getActualColumnName();
    method.addJavaDocLine("/**");
    method.addJavaDocLine(JOINER.join(" * GET ", StringUtil.isBlank(remarks) ? column : remarks, " [ ", introspectedTable.getTableConfiguration().getTableName(), ".", introspectedColumn.getActualColumnName(), " ]."));
    method.addJavaDocLine(" *");
    method.addJavaDocLine(JOINER.join(" * @return ", introspectedColumn.getFullyQualifiedJavaType()));
    method.addJavaDocLine(" */");
  }
  
  @Override
  public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
    val remarks = introspectedColumn.getRemarks();
    val column = introspectedColumn.getActualColumnName();
    method.addJavaDocLine("/**");
    method.addJavaDocLine(JOINER.join(" * SET ", StringUtil.isBlank(remarks) ? column : remarks, " [ ", introspectedTable.getTableConfiguration().getTableName(), ".", introspectedColumn.getActualColumnName(), " ]."));
    method.addJavaDocLine(" *");
    method.getParameters().forEach(param -> method.addJavaDocLine(JOINER.join(" * @param ", param.getName(), " " + "", introspectedColumn.getFullyQualifiedJavaType())));
    method.addJavaDocLine(" */");
  }
  
  @Override
  public void addJavaFileComment(CompilationUnit compilationUnit) {
    compilationUnit.addFileCommentLine
      ("//*****************************************************************************");
    compilationUnit.addFileCommentLine
      ("// The file is automatically generated by the program, do not manually modify. ");
    compilationUnit.addFileCommentLine
      ("//*****************************************************************************");
    compilationUnit.addFileCommentLine("");
  }
  
  @Override
  protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
    super.addJavadocTag(javaElement, markAsDoNotDelete);
  }
  
  @Override
  protected String getDateString() {
    return super.getDateString();
  }
  
  @Override
  public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {}
  
  @Override
  public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) { }
  
  @Override
  public void addComment(XmlElement xmlElement) {}
  
  @Override
  public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
    super.addEnumComment(innerEnum, introspectedTable);
  }
  
  @Override
  public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
    Optional.of(method).filter(v -> v.getName().startsWith("with")).ifPresent(v -> this.setWithMethod(v, introspectedTable));
  }
  
  private void setWithMethod(Method method, IntrospectedTable introspectedTable) {
    String field = method.getName().substring(4);
    field = field.replaceFirst(field.substring(0, 1), field.substring(0, 1).toLowerCase());
    String remark = null;
    String column = null;
    String jdbc = null;
    for (val each : introspectedTable.getAllColumns()) {
      if (field.equals(each.getJavaProperty())) {
        remark = each.getRemarks();
        column = each.getActualColumnName();
        jdbc = each.getFullyQualifiedJavaType().getFullyQualifiedName();
        break;
      }
    }
    method.addJavaDocLine("/**");
    method.addJavaDocLine(JOINER.join(" *", " WITH ", StringUtils.isBlank(remark) ? column : remark, " [ ", introspectedTable.getTableConfiguration().getTableName(), ".", column, " ]."));
    method.addJavaDocLine(" *");
    method.addJavaDocLine(JOINER.join(" *", " @param ", field, " ", jdbc));
    method.addJavaDocLine(JOINER.join(" *", " @return ", method.getReturnType().getFullyQualifiedNameWithoutTypeParameters()));
    method.addJavaDocLine(" */");
  }
}
